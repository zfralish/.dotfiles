ls
nvim .
ls
neofetch
nvim .
ls
exit
winget install helix
winget install Helix.Helix
refreshenv
hx
cd D
cd D:
cd A
cd A:
cd A:/
ls
dev
cd A:/
ls
cd falconr-api\
hx .
cd A
cd A:
cd A:\
ls
cd falconr-api\
hx .
ls
hx --health
winget install gopls
go install golang.org/x/tools/gopls@latest
hx --health
npm i --global typescript-language-server
npm
winget install node
winget install nodejs
node
cd A:\
ls
npm i --global typescript-language-server
cd falconr-api\
ls
hx --health
npm i --global prettier
hx --health
hx .
ls 
cd 
ls
cd .config
ls
cd ..
cd AppData\
ls
cd local
ls
cd helix
ls
helix config.toml
hx config.toml
ls
hx .
npm install pyright -g
pip
pip install ruff
pip install black
hx $nu.config-path
black
ls
hx $nu.config-path
source $env.USERPROFILE\AppData\Roaming\nushell\config.nu
source
source $nu.config-path
win-cfg
hx $nu.config-path
source $nu.config-path
win-cfg
ls
hx $nu.config-path
source $nu.config-path
hd
hx $nu.config-path
source $nu.config-path
win-cfg
ls
cd helix
ls
touch languages.toml
ls
hx languages.toml
hx --health
cd A:/
ls
gh repo clone zfralish/mew_mate_api
ls
pipx 
choco install pipx
winget install pipx
scoop
scoop install pipx
pipx install poetry
pipx ensurepath
poetry
source $nu.config-path
poetry
cd A:/
ls
cd mew_mate_api\
ls
cd ..
ls
gh repo clone zfralish/mm_api
cd mm_api\
poetry install
hx .
win-cfg
ls
cd helix
ls
cp languages.toml ../../Roaming/helix
cd ../../Roaming/helix/
ls
cd A:/mm_api/
hx .
hx ~/AppData/Roaming/helix/languages.toml
hx .
ls
cd
ls
ln
cp AppData\Roaming\helix .dotfiles\
cp --recursive AppData\Roaming\helix .dotfiles\
cd .dotfiles
ls
git add .
git commit -m "adding helix"
git push
rm -rf ~/AppData/Roaming/helix
dev
ls
hx $nu.config-path
source $nu.config-path
falc-api 
go test ./..
ls
go install
go get
ls
go test test
go mod download
go get
go get .
go get -d ./..
go get -d ./
hx Dockerfile
go build
go mod tidy
go test test
go test ./
go test ./test
touch .env
hx .env
go test ./test
docker
docker-compose up db -d
poetry shell
falc-api 
docker-compose up db -d
docker ls
docker ps
go test ./test
hx $nu.config-path
source $nu.config-path
hx $nu.config-path
source $nu.config-path
hx $nu.config-path
source $nu.config-path
dots
hx .
falc-api 
ls
falc-api 
ls
dev
ls
mm-csr
mkdir mm-csr
ls
cd mm-csr
cd ..
ls
rm -rf mm-csr
gh repo clone zfralish/mm-csr
cd mm-csr\
ls
yarn 
ls
npm run dev
hx .
dots
hx .
dve
dev
cd mm-csr\
ls
hx .
dev
hx .
dots
ls
hx .
dev
ls
cd mm-csr\
hx .
hx --health
dots
hx helix
dev
cd mm-csr\
hx .
npm install -g emmet-ls
dots
hx .
dev
cd mm-csr\
ls
hx .
ls
cd cmd
ls
cd ..
go run cmd\falconr
go run falconr/cmd/falconr
go run api
go run falconr/cmd/falconr api
hx .
dots
git add .
git commit -m "syncing changes"
git push
dots
ls
cd nushell
ls
git add config.nu
git add env.nu
git commit -m "adding config changes"
exit
ls
gh
hx
cd ~/.dotfiles
ls
cd .config
ls
cd helix
cd ..
rm -rf helix
ls
ln -s ~/.dotfiles/helix ~/.config/helix
ls
hx .
wget
cd ..
wget https://go.dev/dl/go1.23.1.linux-386.tar.gz
hx $nu.config-path
go
source $nu.config-path
go
go version
ls
rm -rf go1.23.1.linux-amd64.tar.gz
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
nvm 
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
hx /home/zfralish/.profile
nvm
exit
brew
cd
ls
brew
hx $nu.config-path
source $nu.config-path
brew
ls
brew install nodejs
node
brew
go
node
npm install -g yarn
ls
gh repo clone zfralish/mm-csr
gh repo clone zfralish/falconr-api
cd falconr-api/
go mod tidy
go test ./test
docker ps
docker
docker ps
cd falconr-api/
docker-compose up db -d
go test ./test
hx .
touch .env
hx .
ls
ls -a
dots
hx .
cd ~/falconr-api/
ls
hx .env
go test ./test
ls
cd ~/falconr-api/
ls
hx .
ls
cd ~/falconr-api/
ls
winget update nushell
ls
cd ~/falconr-api/
ls
go run falconr/cmd/falconr api
docker ps
cd mm-csr\
cd ..
cd mm-csr\
lls
ls
cd mm-csr\
cd mm-csr
ls
yarn
npm run dev
ls
cd ..
ls
rm -rf mm-csr
ls
mkdir mm-csr
cd ..
ls
cd zfralish
ls
rm -rf mm-csr
mkdir mm-ui
ls
cd mm-ui
yarn create vite
rm -rf mm-ui
cd ..
rm -rf mm-ui
yarn create vite
cd mm-ui
yarn
yarn dev
yarn add @mantine/core @mantine/hooks @mantine/form @mantine/dates dayjs @mantine/charts recharts@2
yarn install -D @tanstack/router-plugin @tanstack/router-devtools
yarn add -D @tanstack/router-plugin @tanstack/router-devtools
ls
hx vite.config.ts
hx --health
npm install -g prettier
hx vite.config.ts
ls
cd ..
ls
rm -rf mm-ui
ls
gh repo clone zfralish/mm-ui
ls
cd mm-ui
ls
yarn i
yarn
ls
yarn run dev
python
brew install python
brew reinstall python@3.12
python
ls
yarn add -D @tanstack/router-plugin @tanstack/router-devtools
hx vite.config.ts
hx .
hx --health
prettier 
dots
ls
hx .
cd ..
cd mm-ui
ls
hx
cd mm-ui
hx .
ls
prettier 
hx --health
ls
hx .
dots 
hx .
cd ../mm-ui/
ls
hx .
brew install yazi
yazi
cd ..
rm -rf mm-ui
gh repo list
gh repo clone zfralish/mew-mate-ui
cd mew-mate-ui/
ls
yarn
yarn run dev
lf
docker ps
cd ../falconr-api/
ls
go run falconr/cmd/falconr api
hx .
ls
ls -a
hx .env
hx .
go run falconr/cmd/falconr api
hx .
go install golang.org/x/tools/gopls@latest
hx --health
cd ..
ls
go install golang.org/x/tools/gopls@latest
gopls
which go
gopls
hx go --health
brew install gopls
gopls
ls
cd falconr-api/
ls
hx --health go
hx .
dots
hx 
hx .
ls
cd ~/.config
ls
cd helix
ls
hx .
cd ../..
ls
cd falconr-api/
ls
hx .
go run falconr/cmd/falconr api
hx .
go run falconr/cmd/falconr api
go test ./test
git add .
git commit -m "adding config changes"
git config --global user.name "Zeke Fralish"
git commit -m "adding config changes"
git push
gh repo
ls
dots
