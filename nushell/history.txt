ls
nvim .
ls
neofetch
nvim .
ls
exit
winget install helix
winget install Helix.Helix
refreshenv
hx
cd D
cd D:
cd A
cd A:
cd A:/
ls
dev
cd A:/
ls
cd falconr-api\
hx .
cd A
cd A:
cd A:\
ls
cd falconr-api\
hx .
ls
hx --health
winget install gopls
go install golang.org/x/tools/gopls@latest
hx --health
npm i --global typescript-language-server
npm
winget install node
winget install nodejs
node
cd A:\
ls
npm i --global typescript-language-server
cd falconr-api\
ls
hx --health
npm i --global prettier
hx --health
hx .
ls 
cd 
ls
cd .config
ls
cd ..
cd AppData\
ls
cd local
ls
cd helix
ls
helix config.toml
hx config.toml
ls
hx .
npm install pyright -g
pip
pip install ruff
pip install black
hx $nu.config-path
black
ls
hx $nu.config-path
source $env.USERPROFILE\AppData\Roaming\nushell\config.nu
source
source $nu.config-path
win-cfg
hx $nu.config-path
source $nu.config-path
win-cfg
ls
hx $nu.config-path
source $nu.config-path
hd
hx $nu.config-path
source $nu.config-path
win-cfg
ls
cd helix
ls
touch languages.toml
ls
hx languages.toml
hx --health
cd A:/
ls
gh repo clone zfralish/mew_mate_api
ls
pipx 
choco install pipx
winget install pipx
scoop
scoop install pipx
pipx install poetry
pipx ensurepath
poetry
source $nu.config-path
poetry
cd A:/
ls
cd mew_mate_api\
ls
cd ..
ls
gh repo clone zfralish/mm_api
cd mm_api\
poetry install
hx .
win-cfg
ls
cd helix
ls
cp languages.toml ../../Roaming/helix
cd ../../Roaming/helix/
ls
cd A:/mm_api/
hx .
hx ~/AppData/Roaming/helix/languages.toml
hx .
ls
cd
ls
ln
cp AppData\Roaming\helix .dotfiles\
cp --recursive AppData\Roaming\helix .dotfiles\
cd .dotfiles
ls
git add .
git commit -m "adding helix"
git push
rm -rf ~/AppData/Roaming/helix
dev
ls
hx $nu.config-path
source $nu.config-path
falc-api 
go test ./..
ls
go install
go get
ls
go test test
go mod download
go get
go get .
go get -d ./..
go get -d ./
hx Dockerfile
go build
go mod tidy
go test test
go test ./
go test ./test
touch .env
hx .env
go test ./test
docker
docker-compose up db -d
poetry shell
falc-api 
docker-compose up db -d
docker ls
docker ps
go test ./test
hx $nu.config-path
source $nu.config-path
hx $nu.config-path
source $nu.config-path
hx $nu.config-path
source $nu.config-path
dots
hx .
falc-api 
ls
falc-api 
ls
dev
ls
mm-csr
mkdir mm-csr
ls
cd mm-csr
cd ..
ls
rm -rf mm-csr
gh repo clone zfralish/mm-csr
cd mm-csr\
ls
yarn 
ls
npm run dev
hx .
dots
hx .
dve
dev
cd mm-csr\
ls
hx .
dev
hx .
dots
ls
hx .
dev
ls
cd mm-csr\
hx .
hx --health
dots
hx helix
dev
cd mm-csr\
hx .
npm install -g emmet-ls
dots
hx .
dev
cd mm-csr\
ls
hx .
ls
cd cmd
ls
cd ..
go run cmd\falconr
go run falconr/cmd/falconr
go run api
go run falconr/cmd/falconr api
hx .
dots
git add .
git commit -m "syncing changes"
git push
dots
ls
cd nushell
ls
git add config.nu
git add env.nu
git commit -m "adding config changes"
